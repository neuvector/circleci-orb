version: 2.1
description: |
  This orb is for NeuVector vulnerability scanning.
display:
  home_url: https://neuvector.com/
  source_url: https://github.com/neuvector/circleci-orb/
examples:
  image-scan:
    description: Scan a image
    usage:
      version: 2.1
      orbs:
        neuvector: neuvector/neuvector-orb@2.1
      jobs:
        build_image:
          docker:
            - image: docker:stable-git
          steps:
            - setup_remote_docker
            - checkout
            - run:
                name: build container
                command: |
                  docker build -t ${CIRCLE_PROJECT_REPONAME}:ci .
            - run:
                name: Save Docker image
                command: |
                  rm -rf /home/circleci/project/neuvector/
                  mkdir /home/circleci/project/neuvector/ -p
                  docker save -o /home/circleci/project/neuvector/${CIRCLE_PROJECT_REPONAME}-ci.tar ${CIRCLE_PROJECT_REPONAME}:ci
            - persist_to_workspace:
                root: /home/circleci/project/neuvector/
                paths:
                  - ./
      workflows:
        scan-local_image:
          jobs:
            - build_image
            - neuvector/scan-image:
                requires:
                  - build_image
                context: myContext
                local: true
                file: "${CIRCLE_PROJECT_REPONAME}-ci.tar"
                scan_layers: false
                high_vul_to_fail: 10
                medium_vul_to_fail: 30
        scan-image:
          jobs:
            - neuvector/scan-image:
                context: myContext
                registry_url: https://registry.hub.docker.com
                repository: library/alpine
                tag: "3.12.0"
                scan_layers: false
                high_vul_to_fail: 0
                medium_vul_to_fail: 3
executors:
  default:
    machine: true
commands:
  load_image:
    description: load image
    parameters:
      file:
        description: tar file saved from docker running container
        type: string
      path:
        description: path to save the tar file
        type: string
    steps:
      - run:
          name: load docker image from tar file
          command: |
            docker load -i <<parameters.path>><<parameters.file>>
  docker_login:
    description: docker login
    parameters:
      username:
        description: docker login user
        type: string
      password:
        description: docker login password
        type: string
    steps:
      - run:
          name: docker login
          command: |
            echo "<<parameters.password>>" | docker login --username "<<parameters.username>>" --password-stdin
  run_scanner:
    description: run the Scanner container
    parameters:
      host_ip:
        description: The IP address hosting Neuvector Controller and Scanner
        type: string
      scanner_port:
        description: The port to call scanner API
        type: string
        default: "10443"
      controller_image:
        description: The Neuvector Controller image
        type: string
        default: <<parameters.nv_controller_image>>
      scanner_image:
        description: The Neuvector Scanner image
        type: string
        default: <<parameters.nv_scanner_image>>
    steps:
      - run:
          name: Run Neuvector Scanner
          command: |
            docker run -itd --privileged --name neuvector.controller -e CTRL_PATH_DEBUG=1 -e CLUSTER_JOIN_ADDR=<<parameters.host_ip>> -p 18301:18301 -p 18301:18301/udp -p 18300:18300 -p 18400:18400 -p <<parameters.scanner_port>>:<<parameters.scanner_port>> -v /var/neuvector:/var/neuvector -v /var/run/docker.sock:/var/run/docker.sock:ro -v /proc:/host/proc:ro -v /sys/fs/cgroup/:/host/cgroup/:ro '<<parameters.controller_image>>'
            sleep 10
            docker run -td --name neuvector.scanner -e CLUSTER_JOIN_ADDR=<<parameters.host_ip>> -p 18402:18402 -v /var/run/docker.sock:/var/run/docker.sock:ro '<<parameters.scanner_image>>'
            sleep 10
  scan:
    description: Scan the container image
    parameters:
      controller_ip:
        description: The IP address of the Controller or Allinone host or service external ip
        type: string
        default: $controller_ip
      controller_port:
        description: The port for REST API
        type: string
        default: $controller_port
      controller_username:
        description: Username for a NeuVector admin
        type: string
        default: $controller_username
      controller_password:
        description: Password for a NeuVector admin
        type: string
        default: $controller_password
      registry_url:
        description: The registry URL full path
        type: string
        default: ''
      registry_username:
        description: The registry Username
        type: string
        default: ''
      registry_password:
        description: The registry password
        type: string
        default: ''
      repository:
        description: The repository to scan
        type: string
      tag:
        description: Tag of the repository to scan
        type: string
      scan_layers:
        description: Scan layer
        type: boolean
        default: false
      md_source:
        description: metadata source
        type: string
        default: ''
    steps:
      - run:
          name: Scan Image
          command: |
            mkdir nvtemp
            mkdir nvreport
            curl --silent --write-out "HTTPSTATUS:%{http_code}" -k -H "Content-Type: application/json" -d '{"password": {"username": "'<<parameters.controller_username>>'", "password": "'<<parameters.controller_password>>'"}}' "https://<<parameters.controller_ip>>:<<parameters.controller_port>>/v1/auth" > ./nvtemp/tokenResponse
            HTTP_STATUS=$(cat ./nvtemp/tokenResponse | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
            if [ "$HTTP_STATUS" == "200" ]; then
              cat ./nvtemp/tokenResponse | sed -e 's/HTTPSTATUS\:.*//g' > ./nvtemp/token.json
            elif [ "$HTTP_STATUS" == "401" -o "$HTTP_STATUS" == "404" -o "$HTTP_STATUS" == "405" ]; then
              echo Invalid credential of NeuVector controller.
              exit 1
            else
              echo Failed to get token. Http status code: $HTTP_STATUS.
              exit 1
            fi

            curl --silent --write-out "HTTPSTATUS:%{http_code}" -k -H "Content-Type: application/json" -H "X-Auth-Token: `cat ./nvtemp/token.json | jq -r '.token.token'`" "https://<<parameters.controller_ip>>:<<parameters.controller_port>>/v1/scan/scanner" > ./nvtemp/scannerResponse
            _status_=$(cat ./nvtemp/scannerResponse | sed -e 's/HTTPSTATUS\:.*//g' | jq .scanners[])
            _counter_="0"
            while [ -z "$_status_" -a "$_counter_" != "20" ]; do
              _counter_=$((( _counter_ + 1 )))
              sleep 5
              curl --silent --write-out "HTTPSTATUS:%{http_code}" -k -H "Content-Type: application/json" -H "X-Auth-Token: `cat ./nvtemp/token.json | jq -r '.token.token'`" "https://<<parameters.controller_ip>>:<<parameters.controller_port>>/v1/scan/scanner" > ./nvtemp/scannerResponse
              _status_=$(cat ./nvtemp/scannerResponse | sed -e 's/HTTPSTATUS\:.*//g' | jq .scanners[])
            done

            if [ $_counter_ = "20" ]; then
              echo Neuvector Scanner is not available.
              exit 1
            fi

            curl --silent --write-out "HTTPSTATUS:%{http_code}" -k -H "Content-Type: application/json" -H "X-Auth-Token: `cat ./nvtemp/token.json | jq -r '.token.token'`" -d '{"request": { "metadata":{"source": "'<<parameters.md_source>>'", "user": "${CIRCLE_PROJECT_USERNAME}", "job": "${CIRCLE_PROJECT_REPONAME} #'<<pipeline.number>>'", "workspace": "${CIRCLE_WORKING_DIRECTORY}"}, "registry": "'<<parameters.registry_url>>'", "username": "'<<parameters.registry_username>>'", "password": "'<<parameters.registry_password>>'", "repository": "'<<parameters.repository>>'", "tag": "'<<parameters.tag>>'", "scan_layers": <<parameters.scan_layers>>}}' "https://<<parameters.controller_ip>>:<<parameters.controller_port>>/v1/scan/repository" > ./nvtemp/scanResponse
            HTTP_STATUS=$(cat ./nvtemp/scanResponse | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
            while [ "$HTTP_STATUS" == "304" ]; do
              curl --silent --write-out "HTTPSTATUS:%{http_code}" -k -H "Content-Type: application/json" -H "X-Auth-Token: `cat ./nvtemp/token.json | jq -r '.token.token'`" -d '{"request": { "metadata":{"source": "'<<parameters.md_source>>'", "user": "${CIRCLE_PROJECT_USERNAME}", "job": "${CIRCLE_PROJECT_REPONAME} #'<<pipeline.number>>'", "workspace": "${CIRCLE_WORKING_DIRECTORY}"}, "registry": "'<<parameters.registry_url>>'", "username": "'<<parameters.registry_username>>'", "password": "'<<parameters.registry_password>>'", "repository": "'<<parameters.repository>>'", "tag": "'<<parameters.tag>>'", "scan_layers": <<parameters.scan_layers>>}}' "https://<<parameters.controller_ip>>:<<parameters.controller_port>>/v1/scan/repository" > ./nvtemp/scanResponse
              HTTP_STATUS=$(cat ./nvtemp/scanResponse | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
            done
            if [ "$HTTP_STATUS" == "200" ]; then
              cat ./nvtemp/scanResponse | sed -e 's/HTTPSTATUS\:.*//g' > ./nvreport/scan_repository.json
              echo Scan successfully.
            else
              echo Scan failed. Http status code: $HTTP_STATUS.
              exit 1
            fi
            curl -k -X "DELETE" -H "Content-Type: application/json" -H "X-Auth-Token: `cat ./nvtemp/token.json | jq -r '.token.token'`" "https://<<parameters.controller_ip>>:<<parameters.controller_port>>/v1/auth"
  report:
    description: Print the report
    steps:
      - run:
          name: Short report
          command: |
            VUL_NUM=$(cat ./nvreport/scan_repository.json | jq '.report.vulnerabilities | length')
            if [ "$VUL_NUM" -eq 0 ]; then
              echo No vulnerabilities found.
            else
              echo Total number of vulnerabilities: $VUL_NUM, grouped by package name with vulnerability name.
              jq '[.report.vulnerabilities | group_by(.package_name) | .[] | {package_name: .[0].package_name, vuln_name: [.[].name]}]' ./nvreport/scan_repository.json
            fi
      - run:
          name: Full report
          command: |
            echo Full report in json.
            cat ./nvreport/scan_repository.json | jq .
  checkpoint:
    description: Pass or fail based on criteria
    parameters:
      high_vul_to_fail:
        description: Minimum number of high vulnerabilities to fail the build
        type: integer
        default: 0
      medium_vul_to_fail:
        description: Minimum number of medium vulnerabilities to fail the build
        type: integer
        default: 0
    steps:
      - run:
          name: Check criteria
          command: |
            FOUND_HIGH=$(cat ./nvreport/scan_repository.json | jq '.report.vulnerabilities[] | select(.severity == "High") | .severity' | wc -l)
            FOUND_MEDIUM=$(cat ./nvreport/scan_repository.json | jq '.report.vulnerabilities[] | select(.severity == "Medium") | .severity' | wc -l)
            echo Criteria high_vul_to_fail: <<parameters.high_vul_to_fail>>, medium_vul_to_fail: <<parameters.medium_vul_to_fail>>.
            echo Found high vulnerabilities: $FOUND_HIGH, found medium vulnerabilities: $FOUND_MEDIUM.
            if [ <<parameters.high_vul_to_fail>> -ne 0 -a "$FOUND_HIGH" -ge <<parameters.high_vul_to_fail>> ]; then
              echo Fail due to high vulnerabilities found meets the criteria.
              exit 1
            elif [ <<parameters.medium_vul_to_fail>> -ne 0 -a "$FOUND_MEDIUM" -ge <<parameters.medium_vul_to_fail>> ]; then
              echo Fail due to medium vulnerabilities found meets the criteria.
              exit 1
            else
              echo Pass the criteria check.
            fi
jobs:
  scan-image:
    executor: default
    parameters:
      local:
        description: Scan a local image
        type: boolean
        default: false
      file:
        description: tar file saved from docker running container
        type: string
        default: "${CIRCLE_PROJECT_REPONAME}-ci.tar"
      path:
        description: path to save the tar file
        type: string
        default: "/home/circleci/project/neuvector/"
      nv_controller_image:
        description: The Neuvector Controller image
        type: string
        default: "nvpublic/co"
      nv_scanner_image:
        description: The Neuvector Scanner image
        type: string
        default: "nvpublic/up:jenkins-nv-build-scanner-1007"
      nv_license:
        description: The Neuvector license
        type: string
        default: $nv_license
      controller_ip:
        description: The IP address of the Controller or Allinone host or service external ip
        type: string
        default: $controller_ip
      controller_port:
        description: The port for REST API
        type: string
        default: $controller_port
      controller_username:
        description: Username for a NeuVector admin
        type: string
        default: $controller_username
      controller_password:
        description: Password for a NeuVector admin
        type: string
        default: $controller_password
      registry_url:
        description: The registry URL full path
        type: string
        default: ''
      registry_username:
        description: The registry Username
        type: string
        default: ''
      registry_password:
        description: The registry password
        type: string
        default: ''
      repository:
        description: The repository to scan
        type: string
        default: ''
      tag:
        description: Tag of the repository to scan
        type: string
        default: ''
      scan_layers:
        description: Scan layer
        type: boolean
        default: false
      high_vul_to_fail:
        description: Minimum number of high vulnerabilities to fail the build
        type: integer
        default: 0
      medium_vul_to_fail:
        description: Minimum number of medium vulnerabilities to fail the build
        type: integer
        default: 0
      md_source:
        description: metadata source
        type: string
        default: "CircleCI"
    steps:
      - when:
          condition: <<parameters.local>>
          steps:
            - attach_workspace:
                at: <<parameters.path>>
            - docker_login:
                username: ${NV_DOCKER_USER}
                password: ${NV_DOCKER_PASSWORD}
            - run:
                name: get host ip address
                command: echo "export HOST_IP=$(hostname -I|awk '{print $1}')" >> $BASH_ENV
            - load_image:
                file: <<parameters.file>>
                path: <<parameters.path>>
            - run_scanner:
                host_ip: ${HOST_IP}
                controller_image: <<parameters.nv_controller_image>>
                scanner_image: <<parameters.nv_scanner_image>>
            - scan:
                controller_ip: ${HOST_IP}
                controller_port: "10443"
                repository: ${CIRCLE_PROJECT_REPONAME}
                tag: "ci"
                scan_layers: <<parameters.scan_layers>>
                md_source: <<parameters.md_source>>
      - unless:
          condition: <<parameters.local>>
          steps:
            - scan:
                registry_url: <<parameters.registry_url>>
                repository: <<parameters.repository>>
                registry_username: <<parameters.registry_username>>
                registry_password: <<parameters.registry_password>>
                tag: <<parameters.tag>>
                scan_layers: <<parameters.scan_layers>>
                md_source: <<parameters.md_source>>
      - report
      - checkpoint:
          high_vul_to_fail: <<parameters.high_vul_to_fail>>
          medium_vul_to_fail: <<parameters.medium_vul_to_fail>>
      - store_artifacts:
          path: nvreport
